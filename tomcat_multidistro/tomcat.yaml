---
- name: tomcat installation
  hosts: appservers
  become: yes
  tasks:
    - name: java installation
      ansible.builtin.package:
        name: "{{ java_name }}"
        state: present
    - name: create group
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present
    - name: create user
      ansible.builtin.user:
        name: "{{ user_name }}"
        create_home: yes
        group: "{{ group_name }}"
        home: "{{ user_home }}"
        shell: "{{ user_shell }}"
        state: present
    - name: get tomcat state
      ansible.builtin.stat:
        path: "{{ user_home }}/apache-tomcat-{{ tomcat_version }}"
      register: tomcat_startup
    - name: download and extract tomcat
      ansible.builtin.unarchive:
        src: "https://www-eu.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        remote_src: yes
        dest: "{{ user_home }}"
      when: not tomcat_startup.stat.exists
    - name: create symbolic link
      ansible.builtin.file:
        src: "{{ user_home }}/apache-tomcat-{{ tomcat_version }}"
        path: "{{ user_home }}/latest"
        state: link
      notify:
        - change ownership
        - provide executable permissions to shell script
    - name: create systemd unit file in centos
      ansible.builtin.copy:
        src: "centos-{{ tomcat_service_name }}"
        dest: "/etc/systemd/system/{{ tomcat_service_name }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts['distribution'] == "CentOS"
      notify: do system daemon-reload and enable
    - name: create systemd unit file in centos
      ansible.builtin.copy:
        src: "ubuntu-{{ tomcat_service_name }}"
        dest: "/etc/systemd/system/{{ tomcat_service_name }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts['distribution'] == "Ubuntu"
      notify: do system daemon-reload and enable
    - name: copy the tomcat users
      ansible.builtin.copy:
        src: tomcat-users.xml
        dest: "{{ user_home }}/latest/conf/tomcat-users.xml"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      notify: restart the tomcat
    - name: copy the manager context
      ansible.builtin.copy:
        src: manager-context.xml
        dest: "{{ user_home }}/latest/webapps/manager/META-INF/context.xml"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      notify: restart the tomcat
    - name: copy the hostmanager context
      ansible.builtin.copy:
        src: hostmanager-context.xml
        dest: "{{ user_home }}/latest/webapps/host-manager/META-INF/context.xml"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      notify: restart the tomcat
    - name: ensure tomcat running
      ansible.builtin.systemd_service:
        name: "{{ tomcat_service_name }}"
        state: started
  handlers:
    - name: change ownership
      ansible.builtin.file:
        path: "{{ user_home }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        recurse: yes
    - name: provide executable permissions to shell script
      ansible.builtin.command: "sudo sh -c 'chmod +x {{ user_home }}/latest/bin/*.sh'"
    - name: do system daemon-reload and enable
      ansible.builtin.systemd_service:
        name: "{{ tomcat_service_name }}"
        daemon-reload: yes
        enabled: yes
    - name: restart the tomcat
      ansible.builtin.systemd_service:
        name: "{{ tomcat_service_name }}"
        state: restarted